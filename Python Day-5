{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb038207",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Topic:\n",
    "\n",
    "1.Data Type\n",
    "2.variable\n",
    "3.id(),type(),print(),input()\n",
    "4.Operators : Arth/Relational/Comaparison/Assignment/Logical/Membership/identity\n",
    "5.Type Casting\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c2d6bb94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "#Logical Operator\n",
    "\n",
    "# and & or\n",
    "\n",
    "a = 25\n",
    "b= 26 \n",
    "c= 28\n",
    "d = 30\n",
    "\n",
    "print(a>b and c <d) # False and True = False\n",
    "\n",
    "print(a<b and c <d) #True and True = True\n",
    "\n",
    "print(a>b or c <d) # False and True = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "eb8055dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "#Membership operator  : in  /  not in\n",
    "\n",
    "\n",
    "name = \"EduTECH\"\n",
    "\n",
    "print('e' in name)\n",
    "\n",
    "print('du' not in name)\n",
    "\n",
    "print('EduTECH' == name)\n",
    "\n",
    "print('du' != name)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6dd2fd0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2737323706128\n",
      "2737323706128\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "a = 50\n",
    "b = 50\n",
    "\n",
    "print(id(a))\n",
    "print(id(b))\n",
    "\n",
    "b=100\n",
    "#identity operator : is and is not\n",
    "\n",
    "print(a is not b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3f0e3435",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Student name :\n",
      "vishal\n",
      "Hello  vishal  We are starting with Data Analysis Course\n"
     ]
    }
   ],
   "source": [
    "#input()\n",
    "\n",
    "print(\"Enter Student name :\")\n",
    "\n",
    "s_name = input()\n",
    "\n",
    "print(\"Hello \" , s_name , \" We are starting with Data Analysis Course\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5aca4cc5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter three value :\n",
      "23\n",
      "25\n",
      "100\n",
      "Num1 value is :  23\n",
      "Num2 value is :  25\n",
      "Num3 value is :  100\n"
     ]
    }
   ],
   "source": [
    "print(\"Enter three value :\")\n",
    "\n",
    "num1 = input()\n",
    "num2 = input()\n",
    "num3 = input()\n",
    "\n",
    "\n",
    "print(\"Num1 value is : \" , num1)\n",
    "print(\"Num2 value is : \" , num2)\n",
    "print(\"Num3 value is : \" , num3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f3c998d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter value for Add : 25\n",
      "25\n"
     ]
    }
   ],
   "source": [
    "num1 =input(\"Enter value for Add : \")\n",
    "\n",
    "print(num1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ba0e2c9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Two value for Add\n",
      "Enter 1st Value : 25\n",
      "Enter 2nd Value : 25\n",
      "Add of two Num is :  2525\n"
     ]
    }
   ],
   "source": [
    "# Write a Program to Accept value from user and perform add on them \n",
    "\n",
    "print(\"Enter Two value for Add\")\n",
    "\n",
    "num1 = input(\"Enter 1st Value : \") # String\n",
    "num2 = input(\"Enter 2nd Value : \") # String\n",
    "\n",
    "print(\"Add of two Num is : \" , (num1 + num2)) # str1 + str2 = str1str2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0adcd778",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Type Casting int() / float / lsit()\n",
    "\n",
    "\"\"\"\n",
    "Converting one data type into another data type is Called as Type Casting\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4a086ca7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Two value for Add\n",
      "Enter 1st Value : 25\n",
      "Enter 2nd Value : 25\n",
      "Add of two Num is :  50\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Enter Two value for Add\")\n",
    "\n",
    "num1 = input(\"Enter 1st Value : \") # String\n",
    "num2 = input(\"Enter 2nd Value : \") # String\n",
    "\n",
    "num1=int(num1)\n",
    "num2=int(num2)\n",
    "\n",
    "print(\"Add of two Num is : \" , (num1 + num2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7458164d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Two value for Add\n",
      "Enter 1st Value : 25\n",
      "Enter 2nd Value : 25\n",
      "Add of two Num is :  50\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Enter Two value for Add\")\n",
    "\n",
    "num1 = int(input(\"Enter 1st Value : \")) # int\n",
    "num2 = int(input(\"Enter 2nd Value : \")) # int\n",
    "\n",
    "print(\"Add of two Num is : \" , (num1 + num2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a1737d9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'float'> 25.75\n",
      "<class 'int'> 25\n",
      "<class 'str'> EduTECH Warje\n",
      "<class 'list'> ['E', 'd', 'u', 'T', 'E', 'C', 'H', ' ', 'W', 'a', 'r', 'j', 'e']\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: '25.75 num'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[28], line 18\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28mtype\u001b[39m(name) , name)\n\u001b[0;32m     16\u001b[0m b \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m25.75 num\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m---> 18\u001b[0m b \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mfloat\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mb\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mValueError\u001b[0m: could not convert string to float: '25.75 num'"
     ]
    }
   ],
   "source": [
    "a = 25.75\n",
    "print(type(a) , a)\n",
    "\n",
    "a = int(a)\n",
    "\n",
    "print(type(a) , a)\n",
    "\n",
    "name = \"EduTECH Warje\"\n",
    "\n",
    "print(type(name) , name)\n",
    "\n",
    "name = list(name)\n",
    "\n",
    "print(type(name) , name)\n",
    "\n",
    "b = \"25.75 num\"\n",
    "\n",
    "b = float(b) #could not convert string to float\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
